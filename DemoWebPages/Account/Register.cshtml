@* Usuń tę sekcję, jeśli korzystasz z obsługi pakietów *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Zarejestruj się";

    // Inicjowanie ogólnych zmiennych strony
    var email = "";
    var password = "";
    var confirmPassword = "";

    // Konfiguracja weryfikacji
    Validation.RequireField("email", "Musisz podać adres e-mail.");
    Validation.RequireField("password", "Hasło nie może być puste.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "Hasło i potwierdzenie hasła są niezgodne."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Hasło musi mieć co najmniej 6 znaków"));

    // W przypadku żądania POST weryfikacja i przetwarzanie danych
    if (IsPost) {
        AntiForgery.Validate();
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];

        // Weryfikacja odpowiedzi użytkownika na kod captcha
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Odpowiedź na kod captcha była niepoprawna");
        // }

        // Jeśli wszystkie informacje są prawidłowe, tworzenie nowego konta
        if (Validation.IsValid()) {
            // Wstawianie nowego użytkownika do bazy danych
            var db = Database.Open("StarterSite");

            // Sprawdzanie, czy użytkownik już istnieje
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // Wstawianie adresu e-mail do tabeli profilów
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);

                // Utworzenie i skojarzenie nowego wpisu w bazie danych członkostwa.
                // W razie powodzenia kontynuacja przetwarzania żądania
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,
                            subject: "Potwierdź konto",
                            body: "Twój kod potwierdzenia to: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> w celu aktywowania konta."
                        );
                    }

                    if (requireEmailConfirmation) {
                        // Podziękowanie użytkownikowi za zarejestrowanie się i poinformowanie o wysłaniu wiadomości e-mail
                        Response.Redirect("~/Account/Thanks");
                    } else {
                        // Powrót do strony głównej i zakończenie
                        WebSecurity.Login(email, password);

                        Response.Redirect("~/");
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // Użytkownik już istnieje
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}

<hgroup class="title">
    <h1>@Page.Title.</h1>
    <h2>Utwórz nowe konto.</h2>
</hgroup>

<form method="post">
    @AntiForgery.GetHtml()
    @* Jeśli istnieje co najmniej jeden błąd weryfikacji, powiadomienie użytkownika *@
    @Html.ValidationSummary("Próba utworzenia konta nie powiodła się. Popraw błędy i ponów próbę.", excludeFieldErrors: true, htmlAttributes: null)

    <fieldset>
        <legend>Formularz rejestracji</legend>
        <ol>
            <li class="email">
                <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Adres e-mail</label>
                <input type="text" id="email" name="email" value="@email" @Validation.For("email") />
                @* Wypisanie wszelkich błędów weryfikacji adresu e-mail na stronie *@
                @Html.ValidationMessage("email")
            </li>
            <li class="password">
                <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Hasło</label>
                <input type="password" id="password" name="password" @Validation.For("password") />
                @* Wypisanie wszelkich błędów weryfikacji hasła na stronie *@
                @Html.ValidationMessage("password")
            </li>
            <li class="confirm-password">
                <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}>Potwierdź hasło</label>
                <input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                @* Wypisanie wszelkich błędów weryfikacji hasła na stronie *@
                @Html.ValidationMessage("confirmPassword")
            </li>
            <li class="recaptcha">
                <div class="message-info">
                    <p>
                        W celu włączenia weryfikacji CAPTCHA musisz, <a href="http://go.microsoft.com/fwlink/?LinkId=204140">zainstalować bibliotekę 
                        ASP.NET Web Helpers Library</a> i usunąć komentarz z polecenia ReCaptcha.GetHtml oraz zastąpić wartość 'PUBLIC_KEY'
                        swoim kluczem publicznym. U góry tej strony usuń komentarz z polecenia ReCaptcha. Validate i
                        zastąp wartość 'PRIVATE_KEY' swoim kluczem prywatnym.
                        Zarejestruj się w celu uzyskania kluczy reCAPTCHA na stronie <a href="http://recaptcha.net">reCAPTCHA.net</a>.
                    </p>
                </div>
                @*
                @ReCaptcha.GetHtml("PUBLIC_KEY", theme: "white")
                @Html.ValidationMessage("recaptcha")
                *@
            </li>
        </ol>
        <input type="submit" value="Zarejestruj się" />
    </fieldset>
</form>